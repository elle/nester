= Nester jQuery Plugin wrapped as a Rails3 Gem

Take a form with nested attributes and add the ability to manage multiple nested models.

If javascript is disabled, the form will only allow you to add one nested model at a time. So, it will still work, just not as user-friendly as with js enabled.

The script will add a 'add model' link for new nested models as well a 'remove model' link for existing nested models.

You can check out http://elle.github.com/nester/ (also lives at /examples/html/index.html) for an example.


== Dependencies

- jQuery



== Setup

[1. Add this line to your application's Gemfile:] gem 'nester', :git => 'https://github.com/elle/nester.git'
[2. Re-bundle] $ bundle
[3. Add the nester plugin to the Asset Pipeline in the your application.js file:] //= require jquery.nester


== Usage

=== First, structure your markup similarly to this example:

==== Note: Nester.js expects you to follow these markup requirements:
[A fieldset with an id matching the association in plural form (i.e. #attachments, #answers)] %fieldset\#attachments

[Each record's fields must be within an ol with class a class matching the association in singular form (i.e. .attachment, .answer)]  %ol.attachment.existing

[There must also be an ol with a class of 'blueprints', which Nester.js uses to construct the form fields for new nested models]  %ol.attachment.blueprints

[Existing nested model records must live in an li with a class of 'destroy' for existing records with a _destroy checkbox]  %li.destroy


==== _form.haml (example)
  - # Using simple_form in this case but it is not a must
  = simple_form_for @letter, :html => { :multipart => true } do |f|
    %fieldset
      %ol
        = f.input :text, :label => 'Letter Body'

    = render 'attachment_fields', :f => f

    %fieldset
      %ol
        = f.button :submit


==== _attachment_fields.haml (example)
  %fieldset#attachments
    %legend Relevant images or documents for the letter
    %ol
      %li
        = f.simple_fields_for :attachments do |attachment|
          - if attachment.object.persisted?
            %ol.attachment.existing
              %li
                = attachment_tag(attachment.object) if attachment.object.file?
                = attachment.input :id, :as => :hidden
              %li.input.boolean.destroy
                = attachment.check_box :_destroy
                = attachment.label :_destroy, 'Remove attachment'
          - else
            %ol.attachment.blueprints
              = attachment.input :file, :as => :file
              = attachment.input :title, :label => 'Name of attachment (optional)'




=== Then, initialise the nester.js plugin on your form element, passing the association as a singular string

  $('form').nester({association: 'attachment'})



== TODO

- Simplify markup and loosen reliance on specific markup
- Add an option to set class names when invoking the plugin
- Using templates to clean html markup from logic and easier to customise the html markup
- Pluralize better



== Inspiration and Alternatives:

- https://github.com/nathanvda/cocoon
- https://github.com/ryanb/nested_form



== Thanks

- Gabe Hollombe

